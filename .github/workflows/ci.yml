name: Kotlin Multiplatform App CI/CD

on:
  push:
    branches: [ main ]
    paths-ignore: [ "**/*.md" ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4096m -XX:+HeapDumpOnOutOfMemoryError"
  APP_NAME: "Klyx"
  APP_VERSION: ${{ github.ref_type == 'tag' && github.ref_name || 'dev' }}

jobs:
  build-android-app:
    name: Build Android App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: echo "${{ secrets.KLYX_KEYSTORE }}" | base64 -d > /tmp/klyx.keystore
      - run: echo "${{ secrets.KEYSTORE_PROP }}" | base64 -d > /tmp/sign.properties
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew
      - name: Build Android APK
        run: |
          if ./gradlew tasks --all | grep -q "assembleRelease"; then
            ./gradlew assembleRelease
          else
            echo "Skipping Android build, task not available"
          fi
      - name: Move APK to root
        run: |
          mkdir -p klyx
          find . -path "*/build/outputs/apk/*/*.apk" -exec cp {} klyx/ \; 2>/dev/null || true

      - uses: actions/upload-artifact@v4
        if: hashFiles('klyx/*.apk') != ''
        with:
          name: klyx-android
          path: 'klyx/*.apk'
          retention-days: 30

  build-desktop-jvm:
    name: Build Desktop JVM App
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.collect.outputs.files }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew
      - name: Build JVM App
        run: |
          if ./gradlew tasks --all | grep -q "packageDistributionForCurrentOS"; then
            ./gradlew packageDistributionForCurrentOS shadowJar
          else
            echo "Skipping JVM build, task not available"
          fi

      - name: Collect files
        id: collect
        run: |
          files_array=()
          
          # Find files and add to array
          while IFS= read -r -d '' file; do
            files_array+=("$file")
          done < <(find . \( -path "*/build/compose/binaries/main/*/*" -o -path "*/build/libs/*-all.jar" \) -type f -print0 2>/dev/null || true)
          
          # Convert to JSON array
          if [ ${#files_array[@]} -eq 0 ]; then
            echo "files=[]" >> $GITHUB_OUTPUT
          else
            printf -v files_json '%s\n' "${files_array[@]}" | jq -R . | jq -s -c .
            echo "files=$files_json" >> $GITHUB_OUTPUT
          fi

  upload-desktop-binaries:
    name: Upload Desktop Binaries
    needs: build-desktop-jvm
    if: ${{ needs.build-desktop-jvm.outputs.files != '[]' && needs.build-desktop-jvm.outputs.files != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.build-desktop-jvm.outputs.files) }}
    steps:
      - uses: actions/checkout@v4

      - name: Get basename
        id: filename
        run: echo "file_name=$(basename '${{ matrix.file }}')" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.file_name }}
          path: ${{ matrix.file }}
          retention-days: 30

  build-linux-native:
    name: Build Linux Native
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.linux-artifacts.outputs.files }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: sudo apt-get update && sudo apt-get install -y rpm alien dpkg-dev
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew
      - name: Build Linux binaries
        run: |
          if ./gradlew tasks --all | grep -q "packageDeb"; then
            ./gradlew packageDeb
          else
            echo "Skipping packageDeb, task not available"
          fi
          
          if ./gradlew tasks --all | grep -q "packageRpm"; then
            ./gradlew packageRpm
          else
            echo "Skipping packageRpm, task not available"
          fi

      - name: Collect Linux artifacts
        id: linux-artifacts
        run: |
          files_array=()
          
          # Find .deb files
          while IFS= read -r -d '' file; do
            files_array+=("$file")
          done < <(find . -path "*/build/compose/binaries/main/deb/*.deb" -type f -print0 2>/dev/null || true)
          
          # Find .rpm files
          while IFS= read -r -d '' file; do
            files_array+=("$file")
          done < <(find . -path "*/build/compose/binaries/main/rpm/*.rpm" -type f -print0 2>/dev/null || true)
          
          # Convert to JSON array
          if [ ${#files_array[@]} -eq 0 ]; then
            echo "files=[]" >> $GITHUB_OUTPUT
          else
            printf -v files_json '%s\n' "${files_array[@]}" | jq -R . | jq -s -c .
            echo "files=$files_json" >> $GITHUB_OUTPUT
          fi

  upload-linux-artifacts:
    name: Upload Linux Artifacts
    needs: build-linux-native
    if: ${{ needs.build-linux-native.outputs.files != '[]' && needs.build-linux-native.outputs.files != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.build-linux-native.outputs.files) }}
    steps:
      - uses: actions/checkout@v4

      - name: Get basename
        id: filename
        run: echo "file_name=$(basename '${{ matrix.file }}')" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.file_name }}
          path: ${{ matrix.file }}
          retention-days: 30

  build-windows-native:
    name: Build Windows Native App & Installer
    runs-on: windows-latest
    outputs:
      files: ${{ steps.windows-artifacts.outputs.files }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Windows native binary
        run: |
          if (./gradlew tasks --all | Select-String "packageMsi") {
            ./gradlew packageMsi
          } else {
            echo "Skipping Windows native build, task not available"
          }

      - name: Collect Windows artifacts
        id: windows-artifacts
        shell: pwsh
        run: |
          $files = @()
          
          # Find MSI files
          $msiFiles = Get-ChildItem -Path . -Filter *.msi -Recurse -ErrorAction SilentlyContinue | Where-Object { $_.FullName -like "*build/compose/binaries/main/msi*" }
          if ($msiFiles) { 
            $files += $msiFiles | ForEach-Object { $_.FullName }
          }
          
          # Convert to JSON array
          if ($files.Count -eq 0) {
            "files=[]" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            $filesJson = $files | ConvertTo-Json -Compress
            "files=$filesJson" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }

  upload-windows-artifacts:
    name: Upload Windows Artifacts
    needs: build-windows-native
    if: ${{ needs.build-windows-native.outputs.files != '[]' && needs.build-windows-native.outputs.files != '' }}
    runs-on: windows-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.build-windows-native.outputs.files) }}
    steps:
      - uses: actions/checkout@v4

      - name: Get basename
        shell: pwsh
        run: |
          $fileName = Split-Path '${{ matrix.file }}' -Leaf
          "file_name=$fileName" | Out-File -FilePath $env:GITHUB_ENV -Append

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.file_name }}
          path: ${{ matrix.file }}
          retention-days: 30

  build-macos-native:
    name: Build macOS Native App & DMG
    runs-on: macos-latest
    outputs:
      files: ${{ steps.macos-artifacts.outputs.files }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew

      - name: Package macOS app bundles
        run: |
          if ./gradlew tasks --all | grep -q "packageDmg"; then
            ./gradlew packageDmg
          else
            echo "Skipping packageDmg"
          fi

      - name: Create universal binary
        run: |
          mkdir -p build/universal
          if [ -f "build/bin/macosX64/releaseExecutable/klyx.kexe" ] && [ -f "build/bin/macosArm64/releaseExecutable/klyx.kexe" ]; then
            lipo -create \
              "build/bin/macosX64/releaseExecutable/klyx.kexe" \
              "build/bin/macosArm64/releaseExecutable/klyx.kexe" \
              -output "build/universal/klyx"
          else
            echo "Skipping universal binary (missing arch builds)"
          fi

      - name: Collect macOS artifacts
        id: macos-artifacts
        run: |
          files_array=()
          
          # Find files in different directories
          while IFS= read -r -d '' file; do
            files_array+=("$file")
          done < <(find build/bin/macosX64/releaseExecutable -type f -print0 2>/dev/null || true)
          
          while IFS= read -r -d '' file; do
            files_array+=("$file")
          done < <(find build/bin/macosArm64/releaseExecutable -type f -print0 2>/dev/null || true)
          
          while IFS= read -r -d '' file; do
            files_array+=("$file")
          done < <(find build/universal -type f -print0 2>/dev/null || true)
          
          while IFS= read -r -d '' file; do
            files_array+=("$file")
          done < <(find build/compose/binaries/main/dmg -type f -print0 2>/dev/null || true)
          
          # Convert to JSON array
          if [ ${#files_array[@]} -eq 0 ]; then
            echo "files=[]" >> $GITHUB_OUTPUT
          else
            printf -v files_json '%s\n' "${files_array[@]}" | jq -R . | jq -s -c .
            echo "files=$files_json" >> $GITHUB_OUTPUT
          fi

  upload-macos-artifacts:
    name: Upload macOS Artifacts
    needs: build-macos-native
    if: ${{ needs.build-macos-native.outputs.files != '[]' && needs.build-macos-native.outputs.files != '' }}
    runs-on: macos-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.build-macos-native.outputs.files) }}
    steps:
      - uses: actions/checkout@v4

      - name: Get basename
        run: echo "file_name=$(basename '${{ matrix.file }}')" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.file_name }}
          path: ${{ matrix.file }}
          retention-days: 30

  build-ios-app:
    name: Build iOS App
    runs-on: macos-latest
    outputs:
      files: ${{ steps.ios-artifacts.outputs.files }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew

      - name: Build iOS app
        run: |
          if ./gradlew tasks --all | grep -q "iosSimulatorArm64MainBinaries"; then
            ./gradlew iosSimulatorArm64MainBinaries
          else
            echo "Skipping iOS build"
          fi

      - name: Collect iOS artifacts
        id: ios-artifacts
        run: |
          files_array=()
          
          while IFS= read -r -d '' file; do
            files_array+=("$file")
          done < <(find build/bin/iosSimulatorArm64/releaseExecutable -type f -print0 2>/dev/null || true)
          
          # Convert to JSON array
          if [ ${#files_array[@]} -eq 0 ]; then
            echo "files=[]" >> $GITHUB_OUTPUT
          else
            printf -v files_json '%s\n' "${files_array[@]}" | jq -R . | jq -s -c .
            echo "files=$files_json" >> $GITHUB_OUTPUT
          fi

  upload-ios-artifacts:
    name: Upload iOS Artifacts
    needs: build-ios-app
    if: ${{ needs.build-ios-app.outputs.files != '[]' && needs.build-ios-app.outputs.files != '' }}
    runs-on: macos-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.build-ios-app.outputs.files) }}
    steps:
      - uses: actions/checkout@v4

      - name: Get basename
        run: echo "file_name=$(basename '${{ matrix.file }}')" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.file_name }}
          path: ${{ matrix.file }}
          retention-days: 30

  build-web-app:
    name: Build Web App
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.collect.outputs.files }}
      has_web_build: ${{ steps.collect.outputs.has_web_build }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew

      - name: Build Web app
        run: |
          if ./gradlew tasks --all | grep -q "jsBrowserDistribution"; then
            ./gradlew jsBrowserDistribution
          else
            echo "Skipping web build"
          fi

      - name: Package Web app
        run: |
          mkdir -p build/web-artifacts
          if [ -d "build/dist/js/productionExecutable" ]; then
            cp -r build/dist/js/productionExecutable/* build/web-artifacts/
            tar -czf klyx-${{ env.APP_VERSION }}-web.tar.gz -C build/web-artifacts .
          else
            echo "Skipping, no dist folder"
          fi

      - name: Collect files
        id: collect
        run: |
          files_array=()
          has_web_build="false"
          
          # Find files in web-artifacts directory
          while IFS= read -r -d '' file; do
            files_array+=("$file")
            has_web_build="true"
          done < <(find build/web-artifacts -type f -print0 2>/dev/null || true)
          
          # Add tar.gz file if it exists
          if [ -f "klyx-${{ env.APP_VERSION }}-web.tar.gz" ]; then
            files_array+=("klyx-${{ env.APP_VERSION }}-web.tar.gz")
            has_web_build="true"
          fi
          
          # Convert to JSON array
          if [ ${#files_array[@]} -eq 0 ]; then
            echo "files=[]" >> $GITHUB_OUTPUT
          else
            printf -v files_json '%s\n' "${files_array[@]}" | jq -R . | jq -s -c .
            echo "files=$files_json" >> $GITHUB_OUTPUT
          fi
          
          echo "has_web_build=$has_web_build" >> $GITHUB_OUTPUT

  upload-web-artifacts:
    name: Upload Web Artifacts
    needs: build-web-app
    if: ${{ needs.build-web-app.outputs.files != '[]' && needs.build-web-app.outputs.files != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.build-web-app.outputs.files) }}
    steps:
      - uses: actions/checkout@v4

      - name: Get basename
        run: echo "file_name=$(basename '${{ matrix.file }}')" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.file_name }}
          path: ${{ matrix.file }}
          retention-days: 30

  deploy-web:
    name: Deploy Web to GitHub Pages
    needs: build-web-app
    if: ${{ needs.build-web-app.outputs.has_web_build == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Rebuild web for deployment
        run: |
          chmod +x gradlew
          ./gradlew jsBrowserDistribution

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload built site
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/dist/js/productionExecutable

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Detekt
        run: ./gradlew detekt

      - name: Upload code quality results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            **/build/reports/detekt/
          retention-days: 7