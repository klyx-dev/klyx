name: Kotlin Multiplatform App CI/CD

on:
  push:
    branches: [ main ]
    paths-ignore: [ "**/*.md" ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4096m -XX:+HeapDumpOnOutOfMemoryError"
  APP_NAME: "Klyx"
  APP_VERSION: ${{ github.ref_type == 'tag' && github.ref_name || 'dev' }}

jobs:
  build-android-app:
    name: Build Android App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: echo "${{ secrets.KLYX_KEYSTORE }}" | base64 -d > /tmp/klyx.keystore
      - run: echo "${{ secrets.KEYSTORE_PROP }}" | base64 -d > /tmp/sign.properties
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew
      - name: Build Android APK
        run: |
          if ./gradlew tasks --all | grep -q "assembleRelease"; then
            ./gradlew assembleRelease
          else
            echo "Skipping Android build, task not available"
          fi
      - name: Move APK to root
        run: |
          mkdir -p klyx
          find . -name "*/build/outputs/apk/*/*.apk" -exec cp {} klyx/ \;

      - uses: actions/upload-artifact@v4
        with:
          name: klyx-android
          path: 'klyx/*.apk'
          retention-days: 30

  build-desktop-jvm:
    name: Build Desktop JVM App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew
      - name: Build JVM App
        run: |
          if ./gradlew tasks --all | grep -q "packageDistributionForCurrentOS"; then
            ./gradlew packageDistributionForCurrentOS shadowJar
          else
            echo "Skipping JVM build, task not available"
          fi

      - name: Find binaries
        id: binaries
        run: |
          files=$(find . -path "*/build/compose/binaries/main/*/*" -o -path "*/build/libs/*-all.jar")
          files_json=$(printf '%s\n' $files | jq -R . | jq -s .)
          echo "files=$files_json" >> $GITHUB_OUTPUT

  upload-desktop-binaries:
    name: Upload Desktop Binaries
    needs: build-desktop-jvm
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.build-desktop-jvm.outputs.files) }}
    steps:
      - name: Get basename
        id: filename
        run: echo "file_name=$(basename '${{ matrix.file }}')" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.file_name }}
          path: ${{ matrix.file }}
          retention-days: 30

  build-linux-native:
    name: Build Linux Native
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: sudo apt-get update && sudo apt-get install -y rpm alien dpkg-dev
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew
      - name: Build Linux binaries
        run: |
          if ./gradlew tasks --all | grep -q "packageDeb"; then
            ./gradlew packageDeb
          else
            echo "Skipping packageDeb, task not available"
          fi
          
          if ./gradlew tasks --all | grep -q "packageRpm"; then
            ./gradlew packageRpm
          else
            echo "Skipping packageRpm, task not available"
          fi

      - name: Collect Linux artifacts
        id: linux-artifacts
        run: |
          files="$files $(find build/compose/binaries/main/deb -type f -name "*.deb" || true)"
          files="$files $(find build/compose/binaries/main/rpm -type f -name "*.rpm" || true)"
          files="$files flatpak/com.klyx.yml"
          files_json=$(printf '%s\n' $files | jq -R . | jq -s .)
          echo "files=$files_json" >> $GITHUB_OUTPUT

  upload-linux-artifacts:
    name: Upload Linux Artifacts
    needs: build-linux-native
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.build-linux-native.outputs.files) }}
    steps:
      - name: Get basename
        id: filename
        run: echo "file_name=$(basename '${{ matrix.file }}')" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.file_name }}
          path: ${{ matrix.file }}
          retention-days: 30

  build-windows-native:
    name: Build Windows Native App & Installer
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Windows native binary
        run: |
          if (./gradlew tasks --all | Select-String "packageMsi") {
            ./gradlew packageMsi
          } else {
            echo "Skipping Windows native build, task not available"
          }

      - name: Collect Windows artifacts
        id: windows-artifacts
        shell: pwsh
        run: |
          $files = @()
          $msi = Get-ChildItem -Path build/compose/binaries/main/msi -Filter *.msi -Recurse -ErrorAction SilentlyContinue
          if ($msi) { $files += $msi.FullName }

          $filesJson = $files | ForEach-Object { $_ } | ConvertTo-Json
          "files=$filesJson" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

  upload-windows-artifacts:
    name: Upload Windows Artifacts
    needs: build-windows-native
    runs-on: windows-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.build-windows-native.outputs.files) }}
    steps:
      - name: Get basename
        id: filename
        run: echo "file_name=$(basename '${{ matrix.file }}')" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.file_name }}
          path: ${{ matrix.file }}
          retention-days: 30

  build-macos-native:
    name: Build macOS Native App & DMG
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew

      - name: Package macOS app bundles
        run: |
          if ./gradlew tasks --all | grep -q "packageDmg"; then
            ./gradlew packageDmg
          else
            echo "Skipping packageDmg"
          fi

      - name: Create universal binary
        run: |
          mkdir -p build/universal
          if [ -f "build/bin/macosX64/releaseExecutable/klyx.kexe" ] && [ -f "build/bin/macosArm64/releaseExecutable/klyx.kexe" ]; then
            lipo -create \
              "build/bin/macosX64/releaseExecutable/klyx.kexe" \
              "build/bin/macosArm64/releaseExecutable/klyx.kexe" \
              -output "build/universal/klyx"
          else
            echo "Skipping universal binary (missing arch builds)"
          fi

      - name: Collect macOS artifacts
        id: macos-artifacts
        run: |
          files=$(find build/bin/macosX64/releaseExecutable -type f || true)
          files="$files $(find build/bin/macosArm64/releaseExecutable -type f || true)"
          files="$files $(find build/universal -type f || true)"
          files="$files $(find build/compose/binaries/main/dmg -type f || true)"
          files_json=$(printf '%s\n' $files | jq -R . | jq -s .)
          echo "files=$files_json" >> $GITHUB_OUTPUT

  upload-macos-artifacts:
    name: Upload macOS Artifacts
    needs: build-macos-native
    runs-on: macos-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.build-macos-native.outputs.files) }}
    steps:
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.file | basename }}
          path: ${{ matrix.file }}
          retention-days: 30

  build-ios-app:
    name: Build iOS App
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew

      - name: Build iOS app
        run: |
          if ./gradlew tasks --all | grep -q "iosSimulatorArm64MainBinaries"; then
            ./gradlew iosSimulatorArm64MainBinaries
          else
            echo "Skipping iOS build"
          fi

      - name: Collect iOS artifacts
        id: ios-artifacts
        run: |
          files=$(find build/bin/iosSimulatorArm64/releaseExecutable -type f || true)
          files_json=$(printf '%s\n' $files | jq -R . | jq -s .)
          echo "files=$files_json" >> $GITHUB_OUTPUT

  upload-ios-artifacts:
    name: Upload iOS Artifacts
    needs: build-ios-app
    runs-on: macos-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.build-ios-app.outputs.files) }}
    steps:
      - name: Get basename
        id: filename
        run: echo "file_name=$(basename '${{ matrix.file }}')" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.file_name }}
          path: ${{ matrix.file }}
          retention-days: 30

  build-web-app:
    name: Build Web App
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew

      - name: Build Web app
        run: |
          if ./gradlew tasks --all | grep -q "jsBrowserDistribution"; then
            ./gradlew jsBrowserDistribution
          else
            echo "Skipping web build"
          fi

      - name: Package Web app
        run: |
          mkdir -p build/web-artifacts
          if [ -d "build/dist/js/productionExecutable" ]; then
            cp -r build/dist/js/productionExecutable/* build/web-artifacts/
            tar -czf klyx-${{ env.APP_VERSION }}-web.tar.gz -C build/web-artifacts .
          else
            echo "Skipping, no dist folder"
          fi

      - name: Collect Web artifacts
        id: web-artifacts
        run: |
          files=$(find build/web-artifacts -type f || true)
          files="$files klyx-${{ env.APP_VERSION }}-web.tar.gz"
          files_json=$(printf '%s\n' $files | jq -R . | jq -s .)
          echo "files=$files_json" >> $GITHUB_OUTPUT

  upload-web-artifacts:
    name: Upload Web Artifacts
    needs: build-web-app
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.build-web-app.outputs.files) }}
    steps:
      - name: Get basename
        id: filename
        run: echo "file_name=$(basename '${{ matrix.file }}')" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.file_name }}
          path: ${{ matrix.file }}
          retention-days: 30

  deploy-web:
    name: Deploy Web to GitHub Pages
    needs: build-web-app
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload built site
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/dist/js/productionExecutable

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Detekt
        run: ./gradlew detekt

      - name: Upload code quality results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            **/build/reports/detekt/
          retention-days: 7