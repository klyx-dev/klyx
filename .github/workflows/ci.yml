name: Kotlin Multiplatform App CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4096m -XX:+HeapDumpOnOutOfMemoryError"
  APP_NAME: "klyx"
  APP_VERSION: ${{ github.ref_type == 'tag' && github.ref_name || 'dev' }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew
      - run: ./gradlew test

  build-android-app:
    name: Build Android App
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: echo "${{ secrets.KLYX_KEYSTORE }}" | base64 -d > /tmp/klyx.keystore
      - run: echo "${{ secrets.KEYSTORE_PROP }}" | base64 -d > /tmp/sign.properties
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew
      - name: Build Android APK
        run: |
          if ./gradlew tasks --all | grep -q "assembleRelease"; then
            ./gradlew assembleRelease
          else
            echo "Skipping Android build, task not available"
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: android-app
          path: '**/build/outputs/apk/**/*.apk'
          retention-days: 30

  build-desktop-jvm:
    name: Build Desktop JVM App
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew
      - name: Build JVM App
        run: |
          if ./gradlew tasks --all | grep -q "packageDistributionForCurrentOS"; then
            ./gradlew packageDistributionForCurrentOS shadowJar
          else
            echo "Skipping JVM build, task not available"
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: desktop-jvm
          path: |
            **/build/compose/binaries/main/*/
            **/build/libs/*-all.jar
          retention-days: 30

  build-linux-native:
    name: Build Linux Native
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: sudo apt-get update && sudo apt-get install -y rpm alien dpkg-dev
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew
      - name: Build Linux binaries (if available)
        run: |
          if ./gradlew tasks --all | grep -q "linuxX64MainBinaries"; then
            ./gradlew linuxX64MainBinaries packageDeb packageRpm
          else
            echo "Skipping Linux native build, task not available"
          fi

      - name: Create AppImage
        run: |
          # Download AppImageTool
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          
          # Create AppDir structure
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy binary
          cp build/bin/linuxX64/releaseExecutable/klyx.kexe AppDir/usr/bin/klyx
          
          # Create desktop file
          cat > AppDir/usr/share/applications/klyx.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=Klyx
          Exec=klyx
          Icon=klyx
          Categories=Development;IDE;
          EOF
          
          # Copy icon if exists
          if [ -f "src/commonMain/resources/icon.png" ]; then
            cp src/commonMain/resources/icon.png AppDir/usr/share/icons/hicolor/256x256/apps/klyx.png
          fi
          
          # Create AppImage
          ./appimagetool AppDir klyx-${{ env.APP_VERSION }}-x86_64.AppImage

      - name: Create Flatpak manifest
        run: |
          mkdir -p flatpak
          cat > flatpak/com.klyx.yml << EOF
          app-id: com.klyx
          runtime: org.freedesktop.Platform
          runtime-version: '22.08'
          sdk: org.freedesktop.Sdk
          command: klyx
          finish-args:
            - --share=network
            - --share=ipc
            - --socket=x11
            - --socket=wayland
            - --device=dri
            - --filesystem=home
          modules:
            - name: klyx
              buildsystem: simple
              build-commands:
                - install -Dm755 klyx.kexe /app/bin/klyx
              sources:
                - type: file
                  path: ../build/bin/linuxX64/releaseExecutable/klyx.kexe
          EOF

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-native
          path: |
            **/build/bin/linuxX64/releaseExecutable/
            **/build/compose/binaries/main/deb/
            **/build/compose/binaries/main/rpm/
            *.AppImage
            flatpak/
          retention-days: 30

  build-windows-native:
    name: Build Windows Native App & Installer
    runs-on: windows-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Windows native binary
        run: |
          if (./gradlew tasks --all | Select-String "mingwX64MainBinaries") {
            ./gradlew mingwX64MainBinaries packageMsi
          } else {
            echo "Skipping Windows native build, task not available"
          }

      - name: Create portable ZIP
        run: |
          mkdir portable
          copy "build\bin\mingwX64\releaseExecutable\klyx.exe" portable\
          if exist "src\commonMain\resources" xcopy /E /I "src\commonMain\resources" portable\resources\
          powershell Compress-Archive -Path portable\* -DestinationPath klyx-${{ env.APP_VERSION }}-windows-portable.zip

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-native
          path: |
            **/build/bin/mingwX64/releaseExecutable/
            **/build/compose/binaries/main/msi/
            *.zip
          retention-days: 30

  build-macos-native:
    name: Build macOS Native App & DMG
    runs-on: macos-latest
    needs: test

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew

      - name: Build macOS native binaries
        run: |
          if ./gradlew tasks --all | grep -q "macosX64MainBinaries"; then
            ./gradlew macosX64MainBinaries
          else
            echo "Skipping macosX64MainBinaries"
          fi
          if ./gradlew tasks --all | grep -q "macosArm64MainBinaries"; then
            ./gradlew macosArm64MainBinaries
          else
            echo "Skipping macosArm64MainBinaries"
          fi

      - name: Package macOS app bundles (if available)
        run: |
          if ./gradlew tasks --all | grep -q "packageDmg"; then
            ./gradlew packageDmg
          else
            echo "Skipping packageDmg"
          fi

      - name: Create universal binary
        run: |
          mkdir -p build/universal
          if [ -f "build/bin/macosX64/releaseExecutable/klyx.kexe" ] && [ -f "build/bin/macosArm64/releaseExecutable/klyx.kexe" ]; then
            lipo -create \
              "build/bin/macosX64/releaseExecutable/klyx.kexe" \
              "build/bin/macosArm64/releaseExecutable/klyx.kexe" \
              -output "build/universal/klyx"
          else
            echo "Skipping universal binary (missing arch builds)"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: macos-native
          path: |
            **/build/bin/macosX64/releaseExecutable/
            **/build/bin/macosArm64/releaseExecutable/
            **/build/universal/
            **/build/compose/binaries/main/dmg/
          retention-days: 30

  build-ios-app:
    name: Build iOS App
    runs-on: macos-latest
    needs: test

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew

      - name: Build iOS app
        run: |
          if ./gradlew tasks --all | grep -q "iosSimulatorArm64MainBinaries"; then
            ./gradlew iosSimulatorArm64MainBinaries
          else
            echo "Skipping iOS build"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: ios-app
          path: |
            **/build/bin/iosSimulatorArm64/releaseExecutable/
          retention-days: 30

  build-web-app:
    name: Build Web App
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: chmod +x gradlew

      - name: Build Web app
        run: |
          if ./gradlew tasks --all | grep -q "jsBrowserDistribution"; then
            ./gradlew jsBrowserDistribution
          else
            echo "Skipping web build"
          fi

      - name: Create web archive
        run: |
          if [ -d "build/dist/js/productionExecutable" ]; then
            cd build/dist/js/productionExecutable
            tar -czf ../../../../klyx-${{ env.APP_VERSION }}-web.tar.gz *
          else
            echo "Skipping web archive, no dist folder"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: web-app
          path: |
            **/build/dist/js/productionExecutable/
            *.tar.gz
          retention-days: 30

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-android-app, build-desktop-jvm, build-linux-native, build-windows-native, build-macos-native, build-ios-app, build-web-app]
    if: github.event_name == 'release'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Organize release assets
        run: |
          mkdir -p release-assets
          
          # Android
          find artifacts/android-app -name "*.apk" -exec cp {} release-assets/ \;
          find artifacts/android-app -name "*.aab" -exec cp {} release-assets/ \;
          
          # Desktop JVM
          find artifacts/desktop-jvm -name "*-all.jar" -exec cp {} release-assets/ \;
          
          # Linux
          find artifacts/linux-native -name "*.deb" -exec cp {} release-assets/ \;
          find artifacts/linux-native -name "*.rpm" -exec cp {} release-assets/ \;
          find artifacts/linux-native -name "*.AppImage" -exec cp {} release-assets/ \;
          
          # Windows
          find artifacts/windows-native -name "*.exe" -exec cp {} release-assets/ \;
          find artifacts/windows-native -name "*.msi" -exec cp {} release-assets/ \;
          find artifacts/windows-native -name "*.zip" -exec cp {} release-assets/ \;
          
          # macOS
          find artifacts/macos-native -name "*.dmg" -exec cp {} release-assets/ \;
          
          # Web
          find artifacts/web-app -name "*.tar.gz" -exec cp {} release-assets/ \;
          
          ls -la release-assets/

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          body: |
            ## Download Options
            
            ### Android
            - **APK**: Direct installation file for Android devices
            - **AAB**: Google Play Store bundle format
            
            ### Desktop
            - **JAR**: Cross-platform Java application (requires Java 21+)
            
            ### Linux
            - **DEB**: Debian/Ubuntu package
            - **RPM**: Red Hat/Fedora/CentOS package  
            - **AppImage**: Portable Linux application
            
            ### Windows
            - **MSI**: Windows installer
            - **EXE**: Windows executable
            - **ZIP**: Portable Windows version
            
            ### macOS
            - **DMG**: macOS disk image installer
            
            ### Web
            - **TAR.GZ**: Web application files for hosting
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Detekt
        run: ./gradlew detekt

      - name: Upload code quality results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            **/build/reports/detekt/
          retention-days: 7