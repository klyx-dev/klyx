name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'

env:
  GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4096m -XX:+HeapDumpOnOutOfMemoryError"
  APP_NAME: "Klyx"

jobs:
  build-android-release:
    name: Build Android Release
    runs-on: ubuntu-latest
    outputs:
      apk-path: ${{ steps.apk-info.outputs.path }}
      apk-name: ${{ steps.apk-info.outputs.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Decode keystore
        run: echo "${{ secrets.KLYX_KEYSTORE }}" | base64 -d > /tmp/klyx.keystore

      - name: Decode keystore properties
        run: echo "${{ secrets.KEYSTORE_PROP }}" | base64 -d > /tmp/sign.properties

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Generate Tree-sitter grammar
        run: ./gradlew generateTsGrammar

      - name: Build Android Release APK
        run: ./gradlew assembleRelease

      - name: Find and prepare APK
        id: apk-info
        run: |
          APK_PATH=$(find . -path "*/build/outputs/apk/release/*.apk" -type f | head -1)
          if [ -z "$APK_PATH" ]; then
            echo "No release APK found!"
            exit 1
          fi
          
          VERSION=${GITHUB_REF#refs/tags/v}
          
          APK_NAME="${{ env.APP_NAME }}-${VERSION}.apk"
          
          cp "$APK_PATH" "./$APK_NAME"
          
          echo "path=./$APK_NAME" >> $GITHUB_OUTPUT
          echo "name=$APK_NAME" >> $GITHUB_OUTPUT
          
          echo "APK prepared: $APK_NAME"
          ls -la "./$APK_NAME"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: ${{ steps.apk-info.outputs.path }}
          retention-days: 90

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
      previous-tag: ${{ steps.changelog.outputs.previous-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Generate changelog from commits
        id: changelog
        run: |
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          echo "Current tag: $CURRENT_TAG"
          
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^${CURRENT_TAG}$" | head -1)
          
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
            echo "No previous tag found, using initial commit as base: $PREVIOUS_TAG"
          else
            echo "Previous tag: $PREVIOUS_TAG"
          fi
          
          echo "previous-tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
          
          CHANGELOG="## What's Changed\n\n"
          
          get_commits() {
            local pattern="$1"
            local label="$2"
            git log --pretty=format:"* %s" "${PREVIOUS_TAG}..HEAD" --grep="$pattern" | sed "s/^${pattern%:*}[(:]/**${label}**: /"
          }
          
          FEATURES=$(get_commits "^feat" "Feature")
          FEATURES_ALT=$(get_commits "^feature" "Feature")
          ALL_FEATURES="${FEATURES}${FEATURES:+$'\n'}${FEATURES_ALT}"
          if [ ! -z "$ALL_FEATURES" ]; then
            CHANGELOG="${CHANGELOG}### Features\n${ALL_FEATURES}\n\n"
          fi
          
          FIXES=$(get_commits "^fix" "Fix")
          if [ ! -z "$FIXES" ]; then
            CHANGELOG="${CHANGELOG}### Bug Fixes\n${FIXES}\n\n"
          fi
          
          DOCS=$(get_commits "^docs" "Documentation")
          if [ ! -z "$DOCS" ]; then
            CHANGELOG="${CHANGELOG}### Documentation\n${DOCS}\n\n"
          fi
          
          PERF=$(get_commits "^perf" "Performance")
          if [ ! -z "$PERF" ]; then
            CHANGELOG="${CHANGELOG}### Performance\n${PERF}\n\n"
          fi
          
          REFACTOR=$(get_commits "^refactor" "Refactor")
          if [ ! -z "$REFACTOR" ]; then
            CHANGELOG="${CHANGELOG}### Refactoring\n${REFACTOR}\n\n"
          fi
          
          CHORES=$(git log --pretty=format:"* %s" "${PREVIOUS_TAG}..HEAD" --grep="^chore" | sed 's/^chore[(:]/**Maintenance**: /')
          BUILD=$(git log --pretty=format:"* %s" "${PREVIOUS_TAG}..HEAD" --grep="^build" | sed 's/^build[(:]/**Build**: /')
          CI=$(git log --pretty=format:"* %s" "${PREVIOUS_TAG}..HEAD" --grep="^ci" | sed 's/^ci[(:]/**CI**: /')
          ALL_MAINTENANCE="${CHORES}${CHORES:+$'\n'}${BUILD}${BUILD:+$'\n'}${CI}"
          if [ ! -z "$ALL_MAINTENANCE" ]; then
            CHANGELOG="${CHANGELOG}### Maintenance\n${ALL_MAINTENANCE}\n\n"
          fi
          
          OTHER=$(git log --pretty=format:"* %s" "${PREVIOUS_TAG}..HEAD" \
            --invert-grep \
            --grep="^feat" --grep="^feature" --grep="^fix" --grep="^docs" \
            --grep="^perf" --grep="^refactor" --grep="^chore" --grep="^build" --grep="^ci" \
            --grep="^test" --grep="^style" --grep="^revert")
          if [ ! -z "$OTHER" ]; then
            CHANGELOG="${CHANGELOG}### Other Changes\n${OTHER}\n\n"
          fi
          
          CHANGELOG="${CHANGELOG}**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${CURRENT_TAG}"
          
          {
            echo 'changelog<<EOF'
            echo -e "$CHANGELOG"
            echo EOF
          } >> $GITHUB_OUTPUT
          
          echo "Generated changelog:"
          echo -e "$CHANGELOG"

  create-release:
    name: Create Release
    needs: [build-android-release, generate-changelog]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download APK artifact
        uses: actions/download-artifact@v5
        with:
          name: release-apk
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Release ${{ github.ref_name }}"
          body: ${{ needs.generate-changelog.outputs.changelog }}
          files: |
            ./artifacts/${{ needs.build-android-release.outputs.apk-name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          echo "## Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**APK:** ${{ needs.build-android-release.outputs.apk-name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changelog Preview:" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.generate-changelog.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY